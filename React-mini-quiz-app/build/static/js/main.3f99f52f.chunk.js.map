{"version":3,"sources":["styles/components/quizBank.js","styles/components/questionBox.js","styles/components/result.js","App.js","serviceWorker.js","index.js"],"names":["quizBank","question","options","correct","questionId","n","Promise","resolve","sort","Math","random","slice","QuestionBox","selected","useState","answer","setAnswer","className","map","text","index","key","onClick","Result","score","playAgain","App","state","questionBank","responses","queryQuestionBank","then","setState","computeAnswer","correctAnswer","this","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3f99f52f.chunk.js","sourcesContent":["const quizBank = [\r\n  {\r\n    question: \"Who was the first man to enter a moon ?\",\r\n    options: [\"Charles Darwin\", \"Robert Mongo\", \"David Schawam\", \"Uriel Sam\"],\r\n    correct: \"Charles Darwin\",\r\n    questionId: 1,\r\n  },\r\n  {\r\n    question: \"In whihc year did the Corona Virus Start ?\",\r\n    options: [\"1999\", \"2003\", \"2020\", \"2019\"],\r\n    correct: \"2019\",\r\n    questionId: 2,\r\n  },\r\n  {\r\n    question: \"Which Country has the greatest Population ?\",\r\n    options: [\"China\", \"Russia\", \"Nigeria\", \"Isreal\"],\r\n    correct: \"China\",\r\n    questionId: 3,\r\n  },\r\n  {\r\n    question: \"When is the next U.S.A Presidential Debate\",\r\n    options: [\"October 2\", \"October 6\", \"October 4\", \"October 1\"],\r\n    correct: \"October 1\",\r\n    questionId: 4,\r\n  },\r\n  {\r\n    question: \"Who is the President of Nigeria ?\",\r\n    options: [\"Buhari\", \"Bwari\", \"Boohari\", \"Bhuari\"],\r\n    correct: \"Buhari\",\r\n    questionId: 5,\r\n  },\r\n  {\r\n    question: \"Who is the Presdient of the U.S.A\",\r\n    options: [\"Doanld Trump\", \"Donny Biden\", \"Tar Coo\", \"Biden Rei\"],\r\n    correct: \"Donald Trump\",\r\n    questionId: 6,\r\n  },\r\n  {\r\n    question: \"Who did Trump Compete with in the Recent Presdiential Debate ?\",\r\n    options: [\"Joe Bidden\", \"Rebecca Rice\", \"tee Harley\", \"Pop Dee\"],\r\n    correct: \"Joe Bidden\",\r\n    questionId: 7,\r\n  },\r\n  {\r\n    question: \"Who was the first man to enter a moon ?\",\r\n    options: [\"Charles Darwin\", \"Robert Mongo\", \"David Schawam\", \"Uriel Sam\"],\r\n    correct: \"Charles Darwin\",\r\n    questionId: 8,\r\n  },\r\n  {\r\n    question: \"Who was the first man to enter a moon ?\",\r\n    options: [\"Charles Darwin\", \"Robert Mongo\", \"David Schawam\", \"Uriel Sam\"],\r\n    correct: \"Charles Darwin\",\r\n    questionId: 9,\r\n  },\r\n  {\r\n    question: \"Who was the first man to enter a moon ?\",\r\n    options: [\"Charles Darwin\", \"Robert Mongo\", \"David Schawam\", \"Uriel Sam\"],\r\n    correct: \"Charles Darwin\",\r\n    questionId: 10,\r\n  },\r\n  {\r\n    question: \"Who was the first man to enter a moon ?\",\r\n    options: [\"Charles Darwin\", \"Robert Mongo\", \"David Schawam\", \"Uriel Sam\"],\r\n    correct: \"Charles Darwin\",\r\n    questionId: 11,\r\n  },\r\n];\r\nexport default (n = 5) =>\r\n  Promise.resolve(quizBank.sort(() => 0.5 - Math.random()).slice(0, n));\r\n","import React, { useState } from \"react\";\r\n\r\nconst QuestionBox = ({ question, options, selected }) => {\r\n  const [answer, setAnswer] = useState(options);\r\n  return (\r\n    <div className=\"questionBox\">\r\n      <div>{question}</div>\r\n      {answer.map((text, index) => (\r\n        <button\r\n          className=\"btn btn-primary p-2 m-2\"\r\n          key={index}\r\n          onClick={() => {\r\n            setAnswer([text]);\r\n            selected(text);\r\n          }}\r\n        >\r\n          {text}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\nexport default QuestionBox;\r\n","import React, { Component } from \"react\";\r\n\r\nconst Result = ({ score, playAgain }) => (\r\n  <div className=\"text-center\">\r\n    <div className=\"score\">You Scored {score} </div>\r\n    <button onClick={playAgain} className=\"pl-again\">\r\n      playAgain\r\n    </button>\r\n  </div>\r\n);\r\n\r\nexport default Result;\r\n","import React, { Component } from \"react\";\nimport quizBank from \"./styles/components/quizBank.js\";\nimport QuestionBox from \"./styles/components/questionBox\";\nimport Result from \"./styles/components/result.js\";\nimport { render } from \"@testing-library/react\";\n\nclass App extends Component {\n  state = {\n    questionBank: [],\n    score: 0,\n    responses: 0,\n  };\n  queryQuestionBank = () => {\n    quizBank().then((question) => {\n      this.setState({ questionBank: question });\n    });\n  };\n  componentDidMount() {\n    this.queryQuestionBank();\n  }\n  computeAnswer = (answer, correctAnswer) => {\n    if (answer === correctAnswer) {\n      this.setState({ score: this.state.score + 1 });\n    }\n    this.setState({\n      responses: this.state.responses < 5 ? this.state.responses + 1 : 5,\n    });\n  };\n  playAgain = () => {\n    this.queryQuestionBank();\n    this.setState({ score: 0, responses: 0 });\n  };\n  render() {\n    return (\n      <div className=\"contain\">\n        <div className=\"quiz-head\">\n          <h3 className=\"quiz-head-text\">Your Quiz App</h3>\n          <h4>Question 1</h4>\n        </div>\n        {this.state.questionBank.length > 0 &&\n          this.state.responses < 5 &&\n          this.state.questionBank.map(\n            ({ question, options, correct, questionId }) => (\n              <QuestionBox\n                options={options}\n                question={question}\n                key={questionId}\n                selected={(answer) => this.computeAnswer(answer, correct)}\n              />\n            )\n          )}\n        {this.state.responses === 5 ? (\n          <Result score={this.state.score} playAgain={this.playAgain} />\n        ) : null}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./styles/style.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}